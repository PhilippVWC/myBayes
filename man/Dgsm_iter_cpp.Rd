% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{Dgsm_iter_cpp}
\alias{Dgsm_iter_cpp}
\title{Time series creation with discretized output}
\usage{
Dgsm_iter_cpp(N, x0, r, alpha, N_discr, skipFirst)
}
\arguments{
\item{N}{integer - Number of iterations}

\item{x0}{double - starting value}

\item{r}{double - controll parameter}

\item{alpha}{double - exponent of general symmetric map}

\item{N_discr}{integer - controlls discretization of state space}

\item{skipFirst}{Boolean - If set to FALSE, the resulting time series contains the initial value x0}
}
\value{
vector of type double - the resulting time series
}
\description{
Create time series produced by discrete model of the general symmetric map
}
\details{
This routine is implemented in C++
}
\examples{
//DEFINITION
Rcpp::NumericVector Dgsm_iter_cpp(int N, double x0, double r, double alpha, int N_discr, bool skipFirst){
  Rcpp::NumericMatrix A = getMat(r,alpha,N_discr);
  //create vector from starting value
  Rcpp::NumericVector x = valToVec_cpp(x0,N_discr);
  Rcpp::NumericVector Series(N);
  //initialization
  if(skipFirst){
    x = dotProd(A,x);
  }
  Series[0] = vecToVal_cpp(x);
  for(int i=1 ; i<N ; i++){
    x = dotProd(A,x);
    Series[i] = vecToVal_cpp(x);
  }
  return(Series);
}
}
\author{
J.C. Lemm, P. v.W. Crommelin
}
