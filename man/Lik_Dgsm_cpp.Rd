% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{Lik_Dgsm_cpp}
\alias{Lik_Dgsm_cpp}
\title{Gaussian likelihood for given data}
\usage{
Lik_Dgsm_cpp(alpha, r, x0, Y, sigma, N_discr)
}
\arguments{
\item{alpha}{double - exponent of gsm}

\item{r}{double - control parameter of gsm}

\item{x0}{double - initial value of the time series}

\item{Y}{vector of type double - the given data}

\item{sigma}{double - the standard deviation of the gaussian likelihood}

\item{N_discr}{integer - discretization of the state space}
}
\description{
Generates a time Series generated by the DISCRETIZED version of the general symmetric map (gsm) and computes the likelihood given the data
}
\details{
This routine is implemented in C++
}
\examples{
//C++ DEFINITION:
double Lik_Dgsm_cpp(double alpha, double r, double x0, Rcpp::NumericVector Y, double sigma, int N_discr){
  int n = Y.size();
  bool skipFirst = true;
  Rcpp::NumericVector X = Dgsm_iter_cpp(n,x0,r,alpha,N_discr,skipFirst);
  double sum = 0;
  for(int i = 0; i<n ; i++){
    sum += pow(Y[i]-X[i],2.0);
  }
  double L = pow(2.0*PI*pow(sigma,2),-0.5*n)*exp(-0.5*sum/pow(sigma,2.0));
  return(L);
}
}
\references{
S. Sprott, Chaos and Time-series analysis
}
\author{
J.C. Lemm, P. v.W. Crommelin
}
